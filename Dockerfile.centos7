# Adapted from: https://github.com/tauri-apps/tauri/issues/1355#issuecomment-896434917

FROM centos:centos7.9.2009

# Install dependencies
RUN \
    yum install -y \
        # notice I'm using an old version of webkit. It works!
        webkitgtk4-devel \
        openssl-devel \
        curl \
        wget \
        squashfs-tools \
        gcc \
        gcc-c++ \
        make \
        file \
        librsvg2-devel

# Install NVM
RUN \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash \
    && source $HOME/.nvm/nvm.sh \
    && nvm install 14 --latest-npm \
    && nvm use node

# Install Rust
RUN \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Install Tauri CLI
RUN \
    source $HOME/.cargo/env \
    # do not use downloaded packages of tauri - you must build it yourself in this environment for correct GLIBC version
    && cargo install tauri-cli --vers 1.0.4
    # NOTE: tauri-macros has nothing to install (no binaries) so this isn't needed
    # && cargo install tauri-macros --vers 1.0.4

ENV PATH=/root/.nvm/versions/node/v14.20.0/bin:$PATH
ENV PATH=/root/.cargo/bin:$PATH


# RUN pnpm create tauri-app my-tauri-app --template react-ts --yes --no-telemetry && \
#     cd my-tauri-app && pnpm install

# # Change directory to the newly created Tauri app
# WORKDIR /app/my-tauri-app

# # Build the Tauri application
# RUN ls -la

# # Add the AppImage target for Rust
# # RUN rustup target add x86_64-unknown-linux-gnu

# # Create the AppImage
# RUN pnpm tauri build  

# # Create an output directory for artifacts
# RUN mkdir -p /app/output
# RUN ls -la  
# RUN ls -la  src-tauri/
# # Copy the AppImage to the output directory
# RUN cp src-tauri/target/release/my-tauri-app-*.AppImage /app/output/

# # Set the command to keep the container running (optional)
# CMD ["tail", "-f", "/dev/null"]
# now instead you build your appimage like:
# cargo tauri build --debug --verbose
